/* Notes: Test each CRUD method before going forward. Last Job Day: 7/2/2025 and Hide category ID with tokens on user request "HTTP PUT and DELETE methods."*/
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using ProductsWebApi.Data;
using ProductsWebApi.DTOs.CategoryDTOs;
using ProductsWebApi.Models;

namespace ProductsWebApi.Services
{

    public class CategoryService
    {

        //Dependency Injection
        public ProductsWebApiDbContext _dbcontext;
        public CategoryService(ProductsWebApiDbContext dbcontext)
        {
            _dbcontext = dbcontext;
        }

        //CRUD Methods for categories
        //1.-C:Create
        public async Task<CategoryResult> CreateCategory(CreateCategoryDto dto)
        {

            //Create new category object
            Category newCategory = new Category()
            {

                Name = dto.Name,
                Description = dto.Description,
                FatherCategoryId = dto.FatherCategoryId,
                DateCreated = DateTime.Today

            };

            //Search for coincidences on the database and return unsuccesfull operation if coincidence is found
            bool sameCategoryFound = await _dbcontext.Categories
                                        .AnyAsync(c => c.Name == dto.Name || c.Description == dto.Description);

            if (sameCategoryFound)
            {
                return new CategoryResult
                {
                    Categories = null,
                    ErrorMessage = "Category with same name or description found",
                    Success = false,
                    OperationDate = DateTime.Today
                };
            }

            //Add changes to databse if category is not yet stored at the Database
            await _dbcontext.AddAsync(newCategory);
            await _dbcontext.SaveChangesAsync();

            //Return Success
            return new CategoryResult
            {
                Categories = [newCategory],
                ErrorMessage = null,
                Success = true,
                OperationDate = newCategory.DateCreated
            };

        }

        //2.-R:Read
        public async Task<CategoryResult> ReadCategories(ReadCategoryDto dto)
        {

            //Request given DTO attributes
            var dtoAttributes = dto.GetType()
                                    .GetProperties()
                                    .ToDictionary(p => p.Name, p => p.GetValue(dto));

            //Dictionary to store request not null attributes
            Dictionary<string, object> dtoNotNullAttributes = new Dictionary<string, object>();

            //List to store category query result
            List<Category>? desiredCategories = new List<Category>();

            foreach (var key in dtoAttributes.Keys)
            {
                if (dtoAttributes[key] != null)
                {
                    dtoNotNullAttributes.Add(key, dtoAttributes[key]!);
                }
            }

            //Build query to find exact coincidences for each not null request attributes
            var query = _dbcontext.Categories.AsQueryable();

            foreach (var attribute in dtoNotNullAttributes)
            {
                var propertyName = attribute.Key;
                var propertyValue = attribute.Value;

                query = query.Where(c => EF.Property<object>(c, propertyName).Equals(propertyValue));
            }

            //Query result
            desiredCategories = await query.ToListAsync();

            //If Category(s) is Found return success
            if (desiredCategories.Any())
            {
                return new CategoryResult
                {
                    Categories = desiredCategories,
                    ErrorMessage = null,
                    Success = true,
                    OperationDate = null
                };
            }

            //Return unsuccessfull operation if the searched category is Not Found
            return new CategoryResult
            {
                Categories = null,
                ErrorMessage = $"Category {dto.Id}, {dto.Name}, {dto.Description}, {dto.FatherCategoryId}, {dto.DateCreated} Not Found",
                Success = false,
                OperationDate = null
            };

        }

        //3.-U:Update
        public async Task<CategoryResult> UpdateCategory(int Id, UpdateCategoryDto dto)
        {

            //List to store category query result
            List<Category>? desiredCategories = new List<Category>();

            //Dictionary to store request not null attributes
            Dictionary<string, object> dtoNotNullAttributes = new Dictionary<string, object>();

            //Convert request DTO into a dictionary to map not null dto values (1...)
            var dtoAttributes = dto
                                .GetType()
                                .GetProperties()
                                .ToDictionary(p => p.Name, p => p.GetValue(dto));

            //Validate non duplicate entries
            bool duplicateEntryExists = await _dbcontext.Categories
                                            .AnyAsync(p => p.Name == dto.Name
                                            || p.Description == dto.Description
                                            );

            Console.WriteLine($"[DEBUG FLAG] {duplicateEntryExists}");

            if (duplicateEntryExists)
            {
                Console.WriteLine("[DEBUG] A real duplicate entry found");
                return new CategoryResult
                {
                    Categories = null,
                    ErrorMessage = "Duplicate DB Entry found",
                    Success = false,
                    OperationDate = null
                };
            }

            //Create reading dto object and validating if user category is updatable (exists)
            ReadCategoryDto readingDto = new ReadCategoryDto()
            {
                Id = Id
            };
            CategoryResult updatableCategoryResult = await ReadCategories(readingDto);


            //If category exists (DTO Is Found on DB)
            if (updatableCategoryResult.Success)
            {

                //Save found category 
                Category updatableCategory = updatableCategoryResult.Categories![0];

                //Convert found element on db into dictionary
                var updatableCategoryResultDictionary = updatableCategory
                                                        .GetType()
                                                        .GetProperties()
                                                        .ToDictionary(p => p.Name, p => p.GetValue(updatableCategory));

                //Filter dto not null attributes and find duplicate entries to stop execution (1...)
                Console.WriteLine("Hello 2!");
                foreach (var key in dtoAttributes.Keys)
                {
                    if (dtoAttributes[key] != null)
                    {
                        dtoNotNullAttributes.Add(key, dtoAttributes[key]!);
                    }
                }

                //Store not null DTO attributes at DB
                foreach (var attribute in dtoNotNullAttributes)
                {

                    Console.WriteLine("Hello 4!");

                    var property = updatableCategory.GetType().GetProperty(attribute.Key);
                    property!.SetValue(updatableCategory, attribute.Value);

                }

                //Add last modified value
                updatableCategory.LastModified = DateTime.Now;
                Console.WriteLine($"Last Modified Date: {updatableCategory.LastModified}");

                //Save changes on DB
                await _dbcontext.SaveChangesAsync();

                //Update DB
                _dbcontext.Categories.Attach(updatableCategory);

                //Success
                return new CategoryResult
                {
                    Categories = new List<Category> { updatableCategory },
                    ErrorMessage = null,
                    Success = true,
                    OperationDate = null,
                };

            }

            //Unsuccesfull response
            return updatableCategoryResult;

        }

        //Delete Method
        public async Task<CategoryResult> DeleteCategory(int Id)
        {

            //Create reading dto object and validating if user category is updatable (exists)
            ReadCategoryDto readingDto = new ReadCategoryDto()
            {
                Id = Id
            };
            CategoryResult deletableCategoryResult = await ReadCategories(readingDto);

            if (deletableCategoryResult.Success)
            {
                _dbcontext.Remove(deletableCategoryResult.Categories![0]);
                await _dbcontext.SaveChangesAsync();

                return deletableCategoryResult;

            }
            else
            {
                return deletableCategoryResult;
            }

        }
        

    }

}

//Result class purpose
public class CategoryResult
{

    public List<Category>? Categories { get; set; }
    public string? ErrorMessage { get; set; }
    public bool Success { get; set; }
    public DateTime? OperationDate { get; set; }

}